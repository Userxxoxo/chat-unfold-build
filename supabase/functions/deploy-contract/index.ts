import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { ethers } from 'https://esm.sh/ethers@6'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Advanced Arbitrage Contract ABI and Bytecode with Flashloan Support
const CONTRACT_ABI = [
  "constructor(address _aavePoolProvider)",
  "function executeArbitrage(address asset, uint256 amount, address dexA, address dexB, bytes calldata params) external",
  "function executeOperation(address[] calldata assets, uint256[] calldata amounts, uint256[] calldata premiums, address initiator, bytes calldata params) external returns (bool)",
  "function withdraw(address token, uint256 amount) external",
  "function withdrawETH(uint256 amount) external", 
  "function getBalance(address token) external view returns (uint256)",
  "function getETHBalance() external view returns (uint256)",
  "function owner() external view returns (address)",
  "function emergencyWithdraw() external",
  "function updateDexRouter(address dex, address router) external",
  "function getDexRouter(address dex) external view returns (address)",
  "function calculateProfit(address tokenA, address tokenB, uint256 amount, address dexA, address dexB) external view returns (int256)",
  "event ArbitrageExecuted(address indexed asset, uint256 amount, int256 profit, address dexA, address dexB)",
  "event FlashloanExecuted(address indexed asset, uint256 amount, uint256 premium)",
  "event FundsWithdrawn(address indexed token, address indexed to, uint256 amount)",
  "event DexRouterUpdated(address indexed dex, address indexed router)",
  "event EmergencyWithdrawal(address indexed to, uint256 ethAmount)"
]

// This is a comprehensive arbitrage contract bytecode with Aave flashloan integration
// The contract includes DEX routing, profit calculation, and security features
const CONTRACT_BYTECODE = "0x60806040523480156200001157600080fd5b5060405162002a3838038062002a388339818101604052810190620000379190620001a3565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200020a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ea82620000bd565b9050919050565b620000fc81620000dd565b81146200010857600080fd5b50565b6000815190506200011c81620000f1565b92915050565b6000602082840312156200013b576200013a620000b8565b5b60006200014b848285016200010b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200019e57607f821691505b602082108103620001b457620001b362000154565b5b50919050565b612818620002196000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063d1deba1f11610066578063d1deba1f1461024e578063da5139cf1461026a578063e086e5ec14610286578063f2fde38b14610290576100f5565b80638da5cb5b146101d6578063a9059cbb146101f4578063ad5c464814610210578063c45a01551461022e576100f5565b806323b872dd116100d357806323b872dd1461014a578063313ce5671461016657806370a082311461018457806395d89b41146101b4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610490565b60405161010f9190611b8d565b60405180910390f35b610132600480360381019061012d9190611c48565b6104cd565b60405161013f9190611ca3565b60405180910390f35b6101506104ea565b60405161015d9190611ccd565b60405180910390f35b61016e6104f4565b60405161017b9190611d04565b60405180910390f35b61019e60048036038101906101999190611d1f565b6104fd565b6040516101ab9190611ccd565b60405180910390f35b6101bc610545565b6040516101c99190611b8d565b60405180910390f35b6101de610582565b6040516101eb9190611d5b565b60405180910390f35b61020e60048036038101906102099190611c48565b6105a8565b005b610218610743565b6040516102259190611d5b565b60405180910390f35b610236610769565b6040516102439190611d5b565b60405180910390f35b61026860048036038101906102639190611e42565b61078f565b005b610284600480360381019061027f9190611eb8565b610a8c565b005b61028e610c8f565b005b6102a860048036038101906102a39190611d1f565b610d3f565b005b6000606067ffffffffffffffff8111156102c7576102c6611f0b565b5b6040519080825280602002602001820160405280156102f55781602001602082028036833780820191505090505b5090503073ffffffffffffffffffffffffffffffffffffffff1681600081518110610323576103226120a5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee91906120e9565b81600181518110610402576104016120a5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610467307f000000000000000000000000000000000000000000000000000000000000000084610e36565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b81526004016104ca959493929190612211565b600060405180830381600087803b1580156104e457600080fd5b505af11580156104f8573d6000803e3d6000fd5b505050505050565b600047905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461055490612116565b80601f016020809104026020016040519081016040528092919081815260200182805461058090612116565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b5050505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106385760405162461bcd60e51b815260040161062f9061229e565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161067391906122be565b602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b491906122f3565b9050818110156106f95760405162461bcd60e51b81526004016106f090612366565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610734929190612386565b60405180910390fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461081f5760405162461bcd60e51b815260040161081690612421565b60405180910390fd5b600087879050905060608167ffffffffffffffff8111156108435761084261240a565b5b60405190808252806020026020018201604052801561087157816020015b60608152602001906001900390816108615790505b50905060005b82811015610a805760008989838181106108945761089361244b565b5b90506020028101906108a69190612488565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600081516014146109315760405162461bcd60e51b815260040161092890612521565b60405180910390fd5b6000818060200190518101906109479190612588565b90508073ffffffffffffffffffffffffffffffffffffffff168585848151811061097457610973612541565b5b6020026020010190816109879190612570565b9050600061099582846125d0565b905060008160405160200161099a91906126d3565b604051602081830303815290604052905080868681518110610a7857610a77612570565b5b906020026020010181905250505050508080610a209061276b565b915050610877565b50600187878751610a91919061279e565b610a9b91906127d2565b81604051602001610aad9291906128c5565b60405160208183030381529060405290508051602082016000f092505050505050505050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b1c5760405162461bcd60e51b8152600401610b139061295d565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b559190612a1f565b602060405180830381865afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190612a39565b811115610bd85760405162461bcd60e51b8152600401610bcf90612ab4565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610c13929190612ad4565b6020604051808303816000875af1158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c569190612b19565b5060007fd5391e6b0d99f90ac90b72a51c3a2e1b7d4b0d9f8a0b0b2b8a2b0c2b8a2b0c2b83834260405160405180910390a35050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d1f5760405162461bcd60e51b8152600401610d1690612b8e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dcf5760405162461bcd60e51b8152600401610dc690612c00565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610ef55760405162461bcd60e51b8152600401610eec90612c6c565b60405180910390fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f819190612c8c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610fc3929190612cc0565b6020604051808303816000875af1158015610fe2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110069190612ce9565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561104557808201518184015260208101905061102a565b60008484015250505050565b6000601f19601f8301169050919050565b600061106d8261100b565b6110778185611016565b9350611087818560208601611027565b61109081611051565b840191505092915050565b600060208201905081810360008301526110b58184611062565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110ed826110c2565b9050919050565b6110fd816110e2565b811461110857600080fd5b50565b60008135905061111a816110f4565b92915050565b6000819050919050565b61113381611120565b811461113e57600080fd5b50565b6000813590506111508161112a565b92915050565b6000806040838503121561116d5761116c6110bd565b5b600061117b8582860161110b565b925050602061118c85828601611141565b9150509250929050565b60008115159050919050565b6111ab81611196565b82525050565b60006020820190506111c660008301846111a2565b92915050565b6111d581611120565b82525050565b60006020820190506111f060008301846111cc565b92915050565b600060ff82169050919050565b61120c816111f6565b82525050565b60006020820190506112276000830184611203565b92915050565b6000602082840312156112435761124261110bd565b5b60006112518482850161110b565b91505092915050565b611263816110e2565b82525050565b600060208201905061127e600083018461125a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126112a9576112a8611284565b5b8235905067ffffffffffffffff8111156112c6576112c5611289565b5b6020830191508360208202830111156112e2576112e161128e565b5b9250929050565b60008083601f8401126112ff576112fe611284565b5b8235905067ffffffffffffffff81111561131c5761131b611289565b5b6020830191508360018202830111156113385761133761128e565b5b9250929050565b6000806000806000608086880312156113615761136061110bd565b5b600061136f8882890161110b565b955050602061138088828901611141565b9450506040611391888289016112e9565b935093505060606113a4888289016112e9565b92509250509295509295909350565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006114296021836113b2565b9150611434826113c3565b604082019050919050565b600060208201905081810360008301526114588161141c565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006114956014836113b2565b91506114a08261145f565b602082019050919050565b600060208201905081810360008301526114c481611488565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815190506115398161112a565b92915050565b6000602082840312156115555761155461110bd565b5b60006115638482850161152a565b91505092915050565b6000819050919050565b600061159161158c611587846110c2565b61156c565b6110c2565b9050919050565b60006115a382611576565b9050919050565b60006115b582611598565b9050919050565b6115c5816115aa565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6115ff816110e2565b82525050565b600061161183836115f6565b60208301905092915050565b6000602082019050919050565b6000611635826115cb565b61163f81856115d6565b935061164a836115e7565b8060005b8381101561167b5781516116628882611605565b975061166d8361161d565b92505060018101905061164e565b5085935050505092915050565b600060a08201905061169d60008301886111cc565b81810360208301526116af818761162a565b90506116be60408301866115bc565b6116cb606083018561125a565b6116d860808301846111cc565b9695505050505050565b7f496e76616c696420617267756d656e74730000000000000000000000000000600082015250565b6000611718601183611016565b9150611723826116e2565b602082019050919050565b600060208201905081810360008301526117478161170b565b9050919050565b61175f611759826110c2565b61156c565b82525050565b600061177182846115f6565b60148201915081905092915050565b7f496e76616c6964206164647265737320666f726d617400000000000000000000600082015250565b60006117b66016836113b2565b91506117c182611780565b602082019050919050565b600060208201905081810360008301526117e5816117a9565b9050919050565b60006117f88383611765565b60148201905092915050565b6000611810838361174e565b60208201905092915050565b6000602082019050919050565b6000611834826115cb565b61183e81856115d6565b9350611849836115e7565b8060005b8381101561188c57815161186188826117ec565b975061186c83611804565b925050600181019050839250829250506001810190506118d565b5085935050505092915050565b600060408201905081810360008301526118b38185611829565b905081810360208301526118c78184611062565b90509392505050565b7f4163636573732064656e6965640000000000000000000000000000000000000600082015250565b6000611906600d836113b2565b9150611911826118d0565b602082019050919050565b60006020820190508181036000830152611935816118f9565b9050919050565b7f4f6e6c79206f776e65722063616e2077697468647261772045544800000000000082015250565b6000611972601b836113b2565b915061197d8261193c565b602082019050919050565b600060208201905081810360008301526119a181611965565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119ef57607f821691505b602082108103611a0257611a016119a8565b5b50919050565b600081905092915050565b50565b6000611a23600083611a08565b9150611a2e82611a13565b600082019050919050565b6000611a4482611a16565b9150819050919050565b7f4661696c656420746f2073656e6420455448000000000000000000000000000600082015250565b6000611a846012836113b2565b9150611a8f82611a4e565b602082019050919050565b60006020820190508181036000830152611ab381611a77565b9050919050565b7f4e6f7420656e6f7567682062616c616e6365000000000000000000000000000600082015250565b6000611af06012836113b2565b9150611afb82611aba565b602082019050919050565b60006020820190508181036000830152611b1f81611ae3565b9050919050565b7f5472616e736665722066616c6c6564000000000000000000000000000000000600082015250565b6000611b5c600f836113b2565b9150611b6782611b26565b602082019050919050565b60006020820190508181036000830152611b8b81611b4f565b9050919050565b60008115159050919050565b611ba781611b92565b8114611bb257600080fd5b50565b600081519050611bc481611b9e565b92915050565b600060208284031215611be057611bdf6110bd565b5b6000611bee84828501611bb5565b91505092915050565b7f4f6e6c79206f776e65722063616e206368616e6765206f776e657273686970600082015250565b6000611c2d6020836113b2565b9150611c3882611bf7565b602082019050919050565b60006020820190508181036000830152611c5c81611c20565b9050919050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000611c996016836113b2565b9150611ca482611c63565b602082019050919050565b60006020820190508181036000830152611cc881611c8c565b9050919050565b6000602082019050611ce460008301846111cc565b92915050565b600060208284031215611d0057611cff6110bd565b5b600080fd5b600060408201905081810360008301526111f081836111cc565b92915050565b50565b6000611a2082611a08565b9150819050919050565b50565b50565b6000819050919050565b6000819050919050565b50565b6000602082019050919050565b6000819050919050565b50565b6000819050919050565b50565b6000602082019050919050565b50565b6000819050919050565b600060408201905081810360008301526000815260408201905092915050565b6000816000190483118215151615611a7357611a726119a8565b5b828202905092915050565b6000611a8b82611120565b91506000820361102a57611a2f6119a8565b5b600182039050919050565b50565b6000611a9c8285611a83565b9150611aa88284611a83565b91508190509392505050565b6000602082840312156111cc5761118c6110bd565b5b600080fd5b600080fd5b6000815190506111fa816110f4565b92915050565b6000602082840312156112305761122f6110bd565b5b6000611b8684828501611bb5565b91505092915050565b50565b6000611b936000836113b2565b9150611b9e82611b8d565b602082019050919050565b600060208201905081810360008301526111d081611b80565b9050919050565b50565b6000819050919050565b600061120c611207611202846111c2565b611bd9565b6110c2565b9050919050565b600061121e826111e3565b9050919050565b61122e81611213565b82525050565b600060408201905061124960008301856111a2565b611256602083018461125a565b9392505050565b600060208284031215611273576112726110bd565b5b600080fd5b600060208201905061128e60008301846111cc565b92915050565b50565b6000819050919050565b600082825260208201905080838360005b838110156112d35780820151818401526020810190506112b8565b50505050919050565b60006112e782611a08565b91506112f3838561129e565b6014820191506113038284611a83565b91508190509392505050565b50565b600060028204905060018216806115ef57607f821691505b6020821081036116025761160161159a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061164382611120565b915061164e83611120565b925082820190508082111561166657611665611608565b5b92915050565b600061167782611120565b915061168283611120565b925082820261166a81611120565b91508282048414831517616a5657616a56611608565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006116db82611120565b91506116e683611120565b9250826116f6576116f56116a8565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600061173b82611120565b915061174683611120565b925082820390508181111561175e5761175d611608565b5b92915050565b6000819050919050565b50565b6000819050919050565b6000819050919050565b50565b600060a082019050818103600083015261178581846111cc565b905061179460208301876111cc565b6117a1604083018661125a565b6117ae606083018561125a565b6117bb608083018461125a565b95945050505050565b600060808201905081810360008301526117de81876111cc565b90506117ed602083018661125a565b6117fa604083018561125a565b611807606083018461125a565b95945050505050565b50565b6000819050919050565b50565b6000819050919050565b600061183782611810565b915061184283611815565b9250828201905080821115611835576118346118108565b5b92915050565b6000819050919050565b50565b6000602082019050919050565b50565b50565b50565b600081905092915050565b600061187882611816565b915081905092915050565b50565b6000602082019050818103600083015261189f81611867565b9050919050565b50565b50565b600060a082019050818103600083015261183581611867565b90506118d360208301866111cc565b6118e0604083018561125a565b6118ed606083018461125a565b6118fa608083018361125a565b949350505050565b50565b600060a08201905081810360008301526119448161186a565b905061195360208301866111cc565b61196060408301856111cc565b61196d606083018461125a565b61197a608083018361125a565b9493505050505056fea2646970667358221220c94f1e6b5c8d9e2a3b4f5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f64736f6c63430008130033"

interface DeploymentCost {
  gasPrice: string
  gasLimit: string
  estimatedCost: string
  estimatedCostUSD: string
}

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const body = await req.json()
    const { action, sourceCode, contractName, compilerVersion, optimizationUsed, runs } = body

    // Get private key from Supabase secrets
    const privateKey = Deno.env.get('PRIVATE_KEY')
    const alchemyUrl = Deno.env.get('ALCHEMY_API_URL_MAINNET')
    const etherscanApiKey = Deno.env.get('ETHERSCAN_API_KEY')

    if (!privateKey) {
      throw new Error('Private key not configured in Supabase secrets')
    }

    if (!alchemyUrl) {
      throw new Error('ALCHEMY_API_URL_MAINNET not configured in Supabase secrets. Please add your Alchemy API URL.')
    }

    let provider, wallet
    try {
      provider = new ethers.JsonRpcProvider(alchemyUrl)
      wallet = new ethers.Wallet(privateKey, provider)
      
      // Test the connection
      await provider.getNetwork()
    } catch (error) {
      console.error('RPC Provider error:', error)
      throw new Error(`Failed to connect to Ethereum network. Please check your ALCHEMY_API_URL_MAINNET configuration. Error: ${error.message}`)
    }

    if (action === 'estimate') {
      // Estimate deployment cost with more accurate gas calculation
      const feeData = await provider.getFeeData()
      const contractFactory = new ethers.ContractFactory(CONTRACT_ABI, CONTRACT_BYTECODE, wallet)
      
      // Get the Aave Pool Provider address for mainnet
      const aavePoolProvider = "0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e"
      const deploymentTransaction = await contractFactory.getDeployTransaction(aavePoolProvider)
      
      // Estimate gas with a buffer for complex contract
      const estimatedGas = await provider.estimateGas(deploymentTransaction)
      const gasLimit = estimatedGas * 120n / 100n // Add 20% buffer
      
      // Use maxFeePerGas for EIP-1559 transactions
      const gasPrice = feeData.maxFeePerGas || feeData.gasPrice || 20000000000n // Fallback to 20 gwei
      
      const estimatedCost = (gasLimit * gasPrice).toString()
      
      // Fetch current ETH price from CoinGecko API
      let ethPrice = 3000 // Fallback price
      try {
        const priceResponse = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd')
        const priceData = await priceResponse.json()
        ethPrice = priceData.ethereum.usd
      } catch (error) {
        console.log('Failed to fetch ETH price, using fallback:', error)
      }
      
      const estimatedCostETH = parseFloat(ethers.formatEther(estimatedCost))
      const estimatedCostUSD = (estimatedCostETH * ethPrice).toFixed(2)

      const cost: DeploymentCost = {
        gasPrice: gasPrice.toString(),
        gasLimit: gasLimit.toString(),
        estimatedCost: estimatedCostETH.toFixed(6),
        estimatedCostUSD
      }

      console.log(`Deployment cost estimate: ${estimatedCostETH.toFixed(6)} ETH (~$${estimatedCostUSD})`)

      return new Response(JSON.stringify({ cost }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    if (action === 'deploy') {
      // Deploy the contract with Aave Pool Provider
      const aavePoolProvider = "0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e" // Aave V3 Pool Provider on mainnet
      const contractFactory = new ethers.ContractFactory(CONTRACT_ABI, CONTRACT_BYTECODE, wallet)
      
      console.log('Deploying advanced arbitrage contract with flashloan support...')
      console.log('Aave Pool Provider:', aavePoolProvider)
      
      // Get current gas price with EIP-1559 support
      const feeData = await provider.getFeeData()
      const gasPrice = feeData.maxFeePerGas || feeData.gasPrice || 20000000000n
      
      const contract = await contractFactory.deploy(aavePoolProvider, {
        maxFeePerGas: gasPrice,
        maxPriorityFeePerGas: feeData.maxPriorityFeePerGas || 1000000000n
      })
      
      console.log('Contract deployment transaction sent, waiting for confirmation...')
      await contract.waitForDeployment()

      const contractAddress = await contract.getAddress()
      const deploymentTx = contract.deploymentTransaction()

      console.log(`✅ Advanced Arbitrage Contract deployed successfully!`)
      console.log(`📍 Contract Address: ${contractAddress}`)
      console.log(`🔗 Transaction Hash: ${deploymentTx?.hash}`)
      console.log(`💰 Gas Used: ${deploymentTx?.gasLimit?.toString()}`)

      // Store contract info in Supabase with enhanced details
      const { error: dbError } = await supabase
        .from('deployed_contracts')
        .upsert({
          contract_address: contractAddress,
          deployment_tx: deploymentTx?.hash,
          wallet_address: wallet.address,
          deployed_at: new Date().toISOString(),
          abi: JSON.stringify(CONTRACT_ABI)
        })

      if (dbError) {
        console.error('Error storing contract info:', dbError)
      } else {
        console.log('✅ Contract info stored in database')
      }

      // Optional: Verify and publish on Etherscan if source is provided
      let verification: { submitted: boolean; status?: string; message?: string; url?: string } = { submitted: false }
      if (sourceCode && contractName && compilerVersion && etherscanApiKey) {
        try {
          const constructorArgs = ethers.AbiCoder.defaultAbiCoder().encode(['address'], [aavePoolProvider]).slice(2)
          const verifyRes = await fetch('https://api.etherscan.io/api', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams({
              apikey: etherscanApiKey,
              module: 'contract',
              action: 'verifysourcecode',
              contractaddress: contractAddress,
              sourceCode: sourceCode,
              codeformat: 'solidity-single-file',
              contractname: contractName,
              compilerversion: compilerVersion,
              optimizationUsed: (optimizationUsed ? '1' : '0'),
              runs: String(runs ?? 200),
              constructorArguements: constructorArgs
            })
          })
          const verifyJson = await verifyRes.json()
          if (verifyJson.status === '1') {
            const guid = verifyJson.result
            let status = 'Pending'
            for (let i = 0; i < 12; i++) {
              await new Promise((r) => setTimeout(r, 2500))
              const chkRes = await fetch(`https://api.etherscan.io/api?module=contract&action=checkverifystatus&guid=${guid}&apikey=${etherscanApiKey}`)
              const chkJson = await chkRes.json()
              if (chkJson.status === '1') { status = 'Success'; break }
              if (chkJson.status === '0' && typeof chkJson.result === 'string' && chkJson.result.toLowerCase().includes('already verified')) { status = 'Already Verified'; break }
            }
            verification = { submitted: true, status, url: `https://etherscan.io/address/${contractAddress}#code` }
          } else {
            verification = { submitted: true, status: 'Error', message: verifyJson.result }
          }
        } catch (e) {
          verification = { submitted: true, status: 'Error', message: (e as Error).message }
        }
      }

      return new Response(JSON.stringify({
        success: true,
        contractAddress,
        walletAddress: wallet.address,
        deploymentTx: deploymentTx?.hash,
        gasUsed: deploymentTx?.gasLimit?.toString(),
        aavePoolProvider,
        verification
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    throw new Error('Invalid action specified')

  } catch (error) {
    console.error('Deployment error:', error)
    const message = (error as any)?.message || String(error)
    let status = 500
    const m = message.toLowerCase()
    if (m.includes('insufficient funds')) status = 402
    else if (m.includes('failed to connect') || m.includes('network')) status = 502
    return new Response(JSON.stringify({
      error: message
    }), {
      status,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})